/'*****
 License
 --------------
 Copyright Â© 2017 Bill & Melinda Gates Foundation
 The Mojaloop files are made available by the Bill & Melinda Gates Foundation under the Apache License, Version 2.0 (the "License") and you may not use these files except in compliance with the License. You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, the Mojaloop files are distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.

 Contributors
 --------------
 This is the official list (alphabetical ordering) of the Mojaloop project contributors for this file.
 Names of the original copyright holders (individuals or organizations)
 should be listed with a '*' in the first column. People who have
 contributed from an organization can be listed under the organization
 that actually holds the copyright for their contributions (see the
 Gates Foundation organization for an example). Those individuals should have
 their names indented and be marked with a '-'. Email address can be added
 optionally within square brackets <email>.

 * Gates Foundation
 - Name Surname <name.surname@gatesfoundation.com>

 * Coil
 - Donovan Changfoot <donovan.changfoot@coil.com>

 * Crosslake
 - Pedro Sousa Barreto <pedrob@crosslaketech.com>

 * ModusBox
 - Miguel de Barros <miguel.debarros@modusbox.com>
 - Roman Pietrzak <roman.pietrzak@modusbox.com>

 --------------
******'/

@startuml
' declate title
title 1.1. Duplicate Validation Match

autonumber
' Actor Keys:
' boundary - APIs/Interfaces, etc
' collections - Kafka Topics
' control - Event Handlers
' entity - Command Handlers
' database - Persistance Store

' declare actors
actor "PayerFSP" as PAYER
boundary "ML-API-ADAPTER\nService" as MLAPI
' boundary "ML-API-ADAPTER\nNotification Handler" as MLNOTIFY
entity "Transfers\nEvt & Command\nHandler" as TRANSFERS
' entity "Participants Evt &\nCommand Handler" as PARTICIPANTS
entity "Transfers\nQuery\nHandler" as TRANSFER_QUERY
' control "TransfersEvt" as cTRANSFER
' entity "TransfersCmd" as eTRANSFER
' control "ParticipantsEvt" as cPARTICIPANT
' entity "ParticipantsCmd" as ePARTICIPANT
' database "Transfer Store" as dTRANSFER
' database "Participant Store" as dPARTICIPANT
database "Transers\nCmd Duplicate\nStore" as TRANSFERS_DUPLICATE_STORE
' database "Transfer Query Store" as TRANSFER_QUERY_STORE
' collections "Topic: TransferQuery" as TOPIC_TRANSFER_QUERY
collections "Topic: TransfersDomainEvt" as TOPIC_TRANSFERS_EVT
collections "Topic: MLIngressEvents" as TOPIC_MLINGRESS_EVT
collections "Topic: NotificationsDomainEvt" as TOPIC_NOTIFICATIONS_EVT
collections "Topic: TransferQueryReponse" as TOPIC_TRANSFER_QUERY_RESPONSE

box "Participants" #LightSlateGrey
  participant PAYER
end box

box "ML API Adapter Service" #LightBlue
  participant MLAPI
  participant TOPIC_MLINGRESS_EVT
  participant TOPIC_NOTIFICATIONS_EVT
end box

box "Command Services" #LightYellow
  participant TRANSFERS
  participant TRANSFERS_DUPLICATE_STORE
  participant TOPIC_TRANSFERS_EVT
end box

box "Query Services" #LightCyan
  participant TRANSFER_QUERY
  participant TOPIC_TRANSFER_QUERY_RESPONSE
end box

' start flow

' TODO:
' - Where do we check the duplicte hash? In the Command or Read side?
'

PAYER <-> MLAPI: POST Transfer Request

MLAPI --> TOPIC_MLINGRESS_EVT: Publish TransferPrepareRequestedEVT

TOPIC_MLINGRESS_EVT --> TRANSFERS: Consume TransferPrepareRequestedEVT - Transfer Prepare request from PayerFSP

  TRANSFERS -> TRANSFERS_DUPLICATE_STORE: Add TransferId to SET

  TRANSFERS_DUPLICATE_STORE -> TRANSFERS: Return failure - Transfer already a SET Member

  TRANSFERS -> TRANSFERS: Validate Duplicate Store Result

  alt Validate Duplicate Detected (validate against false positives if using a Bloom Filter)
  
    TRANSFERS <-> TRANSFER_QUERY: Query Transfer (This is only needed if we use Bloom Filters)
  
    TRANSFERS -> TRANSFERS: Confirm Duplicate based on Query result
    
    alt Duplicate Detected Confirmed

      TRANSFERS --> TOPIC_TRANSFERS_EVT: Publish - DuplicateTransferDetectedEvt

      TOPIC_TRANSFERS_EVT --> TRANSFER_QUERY: Consume - DuplicateTransferDetectedEvt
        TRANSFER_QUERY -> TRANSFER_QUERY: Validate Transfer state
        alt Transfer.status === 'COMMITTED' || Transfer.status === 'ABORTED'
          TRANSFER_QUERY --> TOPIC_TRANSFER_QUERY_RESPONSE: Publish - DuplicateTransferDetectedQueryResponse
          TOPIC_TRANSFER_QUERY_RESPONSE --> MLAPI: Consume - DuplicateTransferDetectedQueryResponse
          MLAPI <-> PAYER: PUT Transfer (Transfer Payload as a GET request)
          MLAPI --> TOPIC_NOTIFICATIONS_EVT: Publish AckNotificationEvt
        else Transfer.status is in a non-final state
          TRANSFER_QUERY -> TRANSFER_QUERY: Do nothiing
        end
    else No Duplicate Found
      TRANSFERS -> TRANSFERS: Process TransferPrepareRequestedEVT - Ref Happy Path Sequence Diagram
    end

  else No Duplicate Found (Bloon filters do not provide False negatives)
  TRANSFERS -> TRANSFERS: Process TransferPrepareRequestedEVT - Ref Happy Path Sequence Diagram
  end

@enduml
